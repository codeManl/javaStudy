spring.application.name=shardingsphere-study
spring.profiles.active=dev
spring.shardingsphere.mode.type=Memory

# 打印SQL
spring.shardingsphere.props.sql-show=true

mybatis-plus.mapper-locations=classpath*:cn/liulele/shardingsphere/mapper/xml/*Mapper.xml
mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl

# 配置真实数据源
spring.shardingsphere.datasource.names=ds_user,ds_order0,ds_order1

# 配置第 1 个数据源
spring.shardingsphere.datasource.ds_user.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds_user.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds_user.jdbc-url=jdbc:mysql://liulele.cn:3326/db_user
spring.shardingsphere.datasource.ds_user.username=root
spring.shardingsphere.datasource.ds_user.password=pwd=142857

# 配置第 2 个数据源
spring.shardingsphere.datasource.ds_order0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds_order0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds_order0.jdbc-url=jdbc:mysql://liulele.cn:3336/db_order
spring.shardingsphere.datasource.ds_order0.username=root
spring.shardingsphere.datasource.ds_order0.password=pwd=142857

# 配置第 3 个数据源
spring.shardingsphere.datasource.ds_order1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds_order1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds_order1.jdbc-url=jdbc:mysql://liulele.cn:3337/db_order
spring.shardingsphere.datasource.ds_order1.username=root
spring.shardingsphere.datasource.ds_order1.password=pwd=142857
# 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
spring.shardingsphere.rules.sharding.tables.t_user.actual-data-nodes=ds_user.t_user
spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=ds_order$->{0..1}.t_order0


# 用于单分片键的标准分片场景
# 分片列名称
spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.sharding-column=user_id
# 分片算法名称
spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.sharding-algorithm-name=alg_inline

# 分片算法配置
# 分片算法类型
spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline.type=INLINE
# 分片算法属性配置
spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline.props.algorithm-expression=ds_order$->{user_id % 2}